# ===================================
# Chrondle Environment Variables
# ===================================
# Copy this file to .env.local and fill in your values

# Node Environment
# Options: development, production, test
NODE_ENV=development

# ===================================
# Convex Configuration (REQUIRED)
# ===================================
# Get these from https://dashboard.convex.dev
#
# IMPORTANT: Chrondle has TWO Convex deployments:
# 
# 1. DEV DEPLOYMENT:  handsome-raccoon-955 (DEVELOPMENT ENVIRONMENT)
#    URL: https://handsome-raccoon-955.convex.cloud
#    Status: Ready for development, has all puzzle data
#
# 2. PROD DEPLOYMENT: fleet-goldfish-183 (PRODUCTION ENVIRONMENT)  
#    URL: https://fleet-goldfish-183.convex.cloud
#    Status: Production database with all event data for puzzle generation

# Public Convex URL - Used by client to connect to Convex
# DEV: https://handsome-raccoon-955.convex.cloud
# PROD: https://fleet-goldfish-183.convex.cloud
NEXT_PUBLIC_CONVEX_URL=https://your-project.convex.cloud

# Convex Deploy Key - Used for production deployments
# Generate from: Convex Dashboard → Settings → Deploy Keys
# Format: prod:deployment-name|base64-encoded-key
CONVEX_DEPLOY_KEY=your-deploy-key-from-dashboard

# Convex Deployment - Current active deployment
# DEV: handsome-raccoon-955 (has puzzle data)
# PROD: prod:fleet-goldfish-183 (empty, needs migration)
# CONVEX_DEPLOYMENT=dev:your-project

# ===================================
# Clerk Authentication (REQUIRED)
# ===================================
# Get these from https://dashboard.clerk.com
#
# IMPORTANT: Chrondle uses different Clerk instances for dev and production:
#
# DEVELOPMENT (test keys):
#   - Use pk_test_... and sk_test_... keys
#   - Shared development instance for testing
#   - Email templates show "development" branding
#
# PRODUCTION (live keys):
#   - Use pk_live_... and sk_live_... keys  
#   - Requires cloning dev instance to production in Clerk Dashboard
#   - Configure custom domain: noreply@chrondle.com
#   - Add production domain to whitelist
#   - Customize email templates with Chrondle branding

# Clerk Publishable Key - Public key for client-side auth
# Format: pk_test_... (development) or pk_live_... (production)
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_...

# Clerk Secret Key - Server-side authentication
# Format: sk_test_... (development) or sk_live_... (production)
CLERK_SECRET_KEY=sk_test_...

# Clerk Webhook Secret - For syncing users to Convex
# Create webhook at: Clerk Dashboard → Webhooks → Add Endpoint
# Endpoint URL: https://your-domain.com/api/webhooks/clerk
# Events: user.created, user.updated
CLERK_WEBHOOK_SECRET=whsec_...

# Production Setup Checklist:
# 1. Clone development instance to production in Clerk Dashboard
# 2. Update email sender to noreply@chrondle.com
# 3. Customize email templates (remove "development" text)
# 4. Add production domain to whitelist
# 5. Generate production API keys (pk_live_ and sk_live_)
# 6. Update webhook endpoint URL to production domain
# 7. Test magic link authentication on mobile devices (uses redirect flow)

# ===================================
# OpenRouter API (OPTIONAL)
# ===================================
# Only needed if using AI features
# Get from https://openrouter.ai/keys
OPENROUTER_API_KEY=sk-or-v1-...

# ===================================
# Stripe (OPTIONAL - Future Feature)
# ===================================
# Payment processing for premium features
# Get from https://dashboard.stripe.com/apikeys

# Stripe Secret Key
STRIPE_SECRET_KEY=sk_test_...

# Stripe Webhook Secret
# Create webhook at: Stripe Dashboard → Webhooks
STRIPE_WEBHOOK_SECRET=whsec_...

# Stripe Publishable Key
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_...

# Stripe Price IDs (create in Stripe Dashboard → Products)
STRIPE_MONTHLY_PRICE_ID=price_...
STRIPE_YEARLY_PRICE_ID=price_...

# ===================================
# Strike Bitcoin Lightning Donations (OPTIONAL)
# ===================================
# Strike API for Bitcoin Lightning Network payments
# Get from https://dashboard.strike.me → API Keys

# Strike API Key - Server-side only, never expose to client
# Create with minimal scopes:
# - partner.receive-request.create (donations/tips)
# - partner.invoice.create (fixed buttons)
# - partner.payment-quote.lightning.create (quotes)
STRIKE_API_KEY=your-strike-api-key

# Strike Webhook Secret - For verifying webhook signatures
# Create webhook at: Strike Dashboard → Webhooks → Add Endpoint
# Endpoint URL: https://your-domain.com/api/webhooks/strike
# Events: invoice.updated, receive_request.completed, receive_request.updated
STRIKE_WEBHOOK_SECRET=your-webhook-secret

# Strike Environment - API base URL
# Options: production, sandbox
# production: https://api.strike.me (live Bitcoin network)
# sandbox: https://api.dev.strike.me (testnet for development)
STRIKE_ENVIRONMENT=sandbox

# Strike Setup Instructions:
# 1. Create Strike account at strike.me
# 2. Complete KYC verification for API access
# 3. Go to Dashboard → API Keys → Create API Key
# 4. Select minimal required scopes (see above)
# 5. Configure webhook endpoint for payment notifications
# 6. Test with sandbox environment first
# 7. Switch to production for live payments

# ===================================
# Bitcoin Donation (LEGACY - Optional)
# ===================================
# Static Bitcoin address for manual donations
# Use a Native SegWit (bc1...) address for lower fees
NEXT_PUBLIC_BITCOIN_ADDRESS=bc1q...

# ===================================
# Vercel Configuration (AUTO-SET)
# ===================================
# These are automatically set by Vercel during deployment
# Do not set manually unless testing Vercel-specific features

# VERCEL=1
# VERCEL_ENV=production|preview|development
# VERCEL_URL=your-deployment-url.vercel.app
# VERCEL_GIT_COMMIT_SHA=...
# VERCEL_GIT_COMMIT_REF=...

# ===================================
# Development & Debugging (OPTIONAL)
# ===================================
# These variables control development features and debugging output

# Debug Hooks - Enable verbose logging from React hooks
# Set to "true" to see debounce updates and state transitions in console
# Default: false (no debug output)
NEXT_PUBLIC_DEBUG_HOOKS=false

# Enable why-did-you-render tracking for React component re-render debugging
# Shows which components re-rendered and why in the browser console
# Only works in development mode
# Default: false (disabled)
NEXT_PUBLIC_WDYR=false

# ===================================
# Deployment Notes
# ===================================
# 
# For Vercel deployment:
# 1. Add all REQUIRED variables to Vercel Dashboard
# 2. Use this build command in vercel.json:
#    npx convex deploy --cmd 'npm run build' --cmd-url-env-var-name NEXT_PUBLIC_CONVEX_URL
# 
# For local development:
# 1. Copy this file to .env.local
# 2. Fill in your values
# 3. Run: npx convex dev (starts Convex in dev mode)
# 4. Run: npm run dev (starts Next.js)
#
# Security reminder:
# - Never commit .env.local to git
# - Keep all secret keys secure
# - Use different keys for dev/staging/production