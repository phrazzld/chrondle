name: Lighthouse CI

# Only run on main branch pushes (merges)
on:
  push:
    branches: [ main, master ]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Need history to push to performance-data branch
        fetch-depth: 0
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9.1.0
        
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
    - name: Cache pnpm store
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build application
      run: pnpm build
      
    - name: Install @lhci/cli
      run: npm install -g @lhci/cli@0.13.x
      
    - name: Run Lighthouse CI
      run: lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        
    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-results
        path: .lighthouseci/
        
    - name: Format results as JSON
      run: |
        # Extract key metrics from Lighthouse results
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        // Find the latest result file
        const resultsDir = '.lighthouseci';
        const files = fs.readdirSync(resultsDir)
          .filter(f => f.endsWith('.json') && f.includes('lhr'))
          .map(f => ({ name: f, time: fs.statSync(path.join(resultsDir, f)).mtime }))
          .sort((a, b) => b.time - a.time);
          
        if (files.length === 0) {
          console.error('No Lighthouse results found');
          process.exit(1);
        }
        
        const latestResult = JSON.parse(
          fs.readFileSync(path.join(resultsDir, files[0].name), 'utf8')
        );
        
        const metrics = {
          timestamp: new Date().toISOString(),
          commit: process.env.GITHUB_SHA,
          scores: {
            performance: Math.round(latestResult.categories.performance.score * 100),
            accessibility: Math.round(latestResult.categories.accessibility.score * 100),
            bestPractices: Math.round(latestResult.categories['best-practices'].score * 100),
            seo: Math.round(latestResult.categories.seo.score * 100),
          },
          metrics: {
            FCP: latestResult.audits['first-contentful-paint'].numericValue,
            LCP: latestResult.audits['largest-contentful-paint'].numericValue,
            TTI: latestResult.audits['interactive'].numericValue,
            TBT: latestResult.audits['total-blocking-time'].numericValue,
            CLS: latestResult.audits['cumulative-layout-shift'].numericValue,
            SI: latestResult.audits['speed-index'].numericValue,
          }
        };
        
        fs.writeFileSync('lighthouse-metrics.json', JSON.stringify(metrics, null, 2));
        
        // Create summary for GitHub
        console.log('## ðŸš€ Lighthouse Results\\n');
        console.log('| Metric | Score |');
        console.log('|--------|-------|');
        console.log(`| Performance | ${metrics.scores.performance} |`);
        console.log(`| Accessibility | ${metrics.scores.accessibility} |`);
        console.log(`| Best Practices | ${metrics.scores.bestPractices} |`);
        console.log(`| SEO | ${metrics.scores.seo} |`);
        console.log('\\n### Core Web Vitals');
        console.log(`- **FCP**: ${(metrics.metrics.FCP / 1000).toFixed(2)}s`);
        console.log(`- **LCP**: ${(metrics.metrics.LCP / 1000).toFixed(2)}s`);
        console.log(`- **TTI**: ${(metrics.metrics.TTI / 1000).toFixed(2)}s`);
        console.log(`- **CLS**: ${metrics.metrics.CLS.toFixed(3)}`);
        " > lighthouse-summary.md
        
    - name: Save metrics to performance-data branch
      run: |
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create or checkout performance-data branch
        git checkout performance-data 2>/dev/null || git checkout -b performance-data
        
        # Create directory structure if needed
        mkdir -p data/lighthouse
        
        # Copy metrics file with timestamp
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        cp lighthouse-metrics.json "data/lighthouse/${TIMESTAMP}_${GITHUB_SHA:0:7}.json"
        
        # Update latest.json
        cp lighthouse-metrics.json data/lighthouse/latest.json
        
        # Commit and push
        git add data/lighthouse/
        git commit -m "Add Lighthouse metrics for ${GITHUB_SHA:0:7}" || echo "No changes to commit"
        git push origin performance-data --force-with-lease || git push origin performance-data
        
    - name: Comment on commit
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('lighthouse-summary.md', 'utf8');
          
          await github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: summary
          });