name: CI/CD Pipeline with Regression Detection

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9.1.0
        
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
    - name: Cache pnpm store
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Verify Convex files are committed
      run: |
        echo "üîç Checking required Convex files are present..."
        for file in api.d.ts api.js dataModel.d.ts server.d.ts server.js; do
          if [ ! -f "convex/_generated/$file" ]; then
            echo "‚ùå Missing required file: convex/_generated/$file"
            echo "These files MUST be committed to Git for deployments"
            echo "Run 'npx convex codegen' and commit the files"
            exit 1
          fi
        done
        echo "‚úÖ All required Convex files present"
      
    - name: Cache Convex generated files
      id: convex-cache
      uses: actions/cache@v4
      with:
        path: convex/_generated
        key: ${{ runner.os }}-convex-${{ hashFiles('convex/schema.ts', 'convex/**/*.ts') }}
        restore-keys: |
          ${{ runner.os }}-convex-
      
    - name: Generate Convex files
      if: steps.convex-cache.outputs.cache-hit != 'true'
      run: npx convex codegen
      env:
        CONVEX_DEPLOYMENT: fleet-goldfish-183
      
    - name: Run linting
      run: pnpm lint
      
    - name: Run type checking
      run: pnpm type-check
      
    - name: Run tests (parallel)
      run: pnpm test:ci
      
    - name: Run puzzle validation
      run: pnpm validate-puzzles
      
    - name: Test module system compatibility
      run: pnpm test-module-system

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9.1.0
        
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
    - name: Cache pnpm store
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Cache Next.js build
      uses: actions/cache@v4
      with:
        path: |
          .next/cache
          .next/.next-build-cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml') }}-
          ${{ runner.os }}-nextjs-
          
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Verify Convex files are committed
      run: |
        echo "üîç Checking required Convex files are present..."
        for file in api.d.ts api.js dataModel.d.ts server.d.ts server.js; do
          if [ ! -f "convex/_generated/$file" ]; then
            echo "‚ùå Missing required file: convex/_generated/$file"
            echo "These files MUST be committed to Git for deployments"
            echo "Run 'npx convex codegen' and commit the files"
            exit 1
          fi
        done
        echo "‚úÖ All required Convex files present"
      
    - name: Cache Convex generated files
      id: convex-cache
      uses: actions/cache@v4
      with:
        path: convex/_generated
        key: ${{ runner.os }}-convex-${{ hashFiles('convex/schema.ts', 'convex/**/*.ts') }}
        restore-keys: |
          ${{ runner.os }}-convex-
      
    - name: Generate Convex files
      if: steps.convex-cache.outputs.cache-hit != 'true'
      run: npx convex codegen
      env:
        CONVEX_DEPLOYMENT: fleet-goldfish-183
      
    - name: Build application
      run: pnpm build
      env:
        NEXT_PUBLIC_CONVEX_URL: https://fleet-goldfish-183.convex.cloud
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_aGVhbHRoeS1kb2UtMjMuY2xlcmsuYWNjb3VudHMuZGV2JA
      
    - name: Verify environment variable handling
      run: |
        echo "üîç Verifying environment variable handling..."
        
        # Check that NEXT_PUBLIC_ variables are included in the build output
        if grep -q "NEXT_PUBLIC_CONVEX_URL" .next/static/chunks/*.js 2>/dev/null || \
           grep -q "fleet-goldfish-183" .next/static/chunks/*.js 2>/dev/null; then
          echo "‚úÖ NEXT_PUBLIC_CONVEX_URL properly embedded in client bundle"
        else
          echo "‚ö†Ô∏è Warning: NEXT_PUBLIC_CONVEX_URL might not be properly embedded"
        fi
        
        # Ensure no sensitive non-NEXT_PUBLIC_ variables are exposed
        if grep -q "CONVEX_DEPLOYMENT" .next/static/chunks/*.js 2>/dev/null || \
           grep -q "CLERK_SECRET_KEY" .next/static/chunks/*.js 2>/dev/null; then
          echo "‚ùå ERROR: Sensitive server-side variables found in client bundle!"
          echo "Only NEXT_PUBLIC_ prefixed variables should be in client code"
          exit 1
        else
          echo "‚úÖ No sensitive server variables exposed in client bundle"
        fi
        
        echo "‚úÖ Environment variable verification passed"
      
    - name: Check bundle size
      run: |
        echo "üìä Checking bundle sizes against configured limits..."
        pnpm size
        if [ $? -ne 0 ]; then
          echo "‚ùå Bundle size limits exceeded! Please optimize your code."
          echo "üí° Tips:"
          echo "   - Check for unnecessary dependencies"
          echo "   - Use dynamic imports for large components"
          echo "   - Analyze bundle with 'pnpm bundle-analysis'"
          exit 1
        fi
        echo "‚úÖ Bundle sizes within limits"
      
    - name: Run Lighthouse CI
      run: |
        echo "üî¶ Running Lighthouse CI performance audit..."
        npx lhci autorun --config=./lighthouserc.json || {
          echo "‚ö†Ô∏è Lighthouse CI failed. Check performance metrics."
          echo "üí° Tips to improve performance:"
          echo "   - Optimize images (use next/image component)"
          echo "   - Reduce JavaScript bundle size"
          echo "   - Implement code splitting"
          echo "   - Minimize render-blocking resources"
          exit 1
        }
        echo "‚úÖ Lighthouse performance checks passed"
      env:
        NEXT_PUBLIC_CONVEX_URL: https://fleet-goldfish-183.convex.cloud
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_aGVhbHRoeS1kb2UtMjMuY2xlcmsuYWNjb3VudHMuZGV2JA
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: .next/